####################################
# BUILD STAGE
####################################
FROM ubuntu:22.04 AS build

RUN sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    python3 \
    python3-pip \
    python3-dev \
    wget \
    tar \
    curl \
    pkg-config \
    libssl-dev \
    unzip \
    protobuf-compiler \
    libpq-dev && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app
# Install rustup and nightly Rust
# RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain none
ENV PATH="/root/.cargo/bin:/root/.local/bin:${PATH}"
COPY rust-toolchain.toml /app/
RUN rustup show

# Install uv using the official installer
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# Setup libtorch
# TODO: don't hardcode the version
# ENV TORCH_VERSION=2.7.0
ENV LIBTORCH=/opt/torch/libtorch
ENV LIBTORCH_INCLUDE=$LIBTORCH
ENV LIBTORCH_LIB=$LIBTORCH
ENV CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=1"
ENV TORCH_CXX_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=1"
ENV LD_LIBRARY_PATH=$LIBTORCH/lib

RUN mkdir -p /opt/torch && \
cd /opt/torch && \
wget -q https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.7.0%2Bcpu.zip && \
unzip libtorch-cxx11-abi-shared-with-deps-2.7.0+cpu.zip && \
rm libtorch-cxx11-abi-shared-with-deps-2.7.0+cpu.zip
    
ENV RUSTFLAGS="-C link-args=-Wl,-rpath,$LIBTORCH/lib"

# Clone and build the expert-kit

COPY ek-base/ /app/ek-base/
COPY ek-benchmark/ /app/ek-benchmark/
COPY ek-computation/ /app/ek-computation/
COPY ek-db/ /app/ek-db/
COPY ek-integration/ /app/ek-integration/
COPY ek-proto/ /app/ek-proto/

COPY Cargo.toml Cargo.lock /app/
COPY buf.yaml /app/
COPY ruff.toml /app/
COPY .gitignore /app/

RUN cargo build --release && \
    cargo install diesel_cli --no-default-features --features 'postgres'

####################################
# COMMON BASE FOR CONTROLLER & WORKER
####################################
FROM ubuntu:22.04 AS base

RUN sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    libpq-dev \
    wget \
    tar \
    curl \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

# Install uv using the official installer
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:/root/.local/bin:${PATH}"

WORKDIR /app
# COPY . .
COPY LICENSE /app/
COPY pyproject.toml /app/
COPY py/ /app/py/
COPY .python-version /app/
COPY uv.lock /app/
RUN uv sync

# Setup libtorch
ENV LIBTORCH=/opt/torch/libtorch
ENV LIBTORCH_INCLUDE=$LIBTORCH
ENV LIBTORCH_LIB=$LIBTORCH
ENV CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0"
ENV TORCH_CXX_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=0"
ENV LD_LIBRARY_PATH=$LIBTORCH/lib

# Copy libtorch from build stage
COPY --from=build /opt/torch/libtorch /opt/torch/libtorch

# Create necessary directories
RUN mkdir -p /etc/expert-kit
RUN mkdir -p /app/data

# Copy built binaries from build stage
COPY --from=build /app/target/release/controller /usr/local/bin/
COPY --from=build /app/target/release/worker /usr/local/bin/

COPY --from=build /root/.cargo/bin/diesel /usr/local/bin

# Copy migration files
COPY --from=build /app/ek-computation/migrations /app/ek-computation/migrations

# Copy python scripts
COPY py /app/py/

# Set working directory
WORKDIR /app

####################################
# CONTROLLER STAGE
####################################
FROM base AS controller

# Create default config with a readable format
RUN cat > /etc/expert-kit/config.yaml <<EOF
storage_provider: fs
storage_fs_path: /app/data/converted
db_dsn: postgres://dev:dev@postgres:5432/dev
hidden_dim: 256
intermediate_dim: 128
instance_name: local_test
EOF

# Expose controller port
EXPOSE 8080

# Run controller
CMD ["controller"]

####################################
# WORKER STAGE
####################################
FROM base AS worker

# Default environment variables
ENV EK_HOSTNAME=worker-instance

# Run worker
CMD ["worker"]
