syntax = "proto3";
package ek.worker.v1;

import "ek/object/v1/object.proto";

message ForwardRequest {
  int32 layer = 1;
  int32 idx = 2;
  int32 batch_size = 3;
  bytes tensor = 4;
}

message ForwardResponse {
  bytes output_tensor = 1;
}

service ComputationService {
  rpc Forward(ForwardRequest) returns (ForwardResponse);
}

message ExpertState {
  enum Stage {
    STAGE_UNSPECIFIED = 0;
    STAGE_ACTIVE = 1;
    STAGE_LOADING = 2;
    STAGE_EVICTING = 3;
  }
  Stage stage = 1;
}

message RetrieveStateReq {}
message RetrieveStateResp {
  message ExpertWithState {
    ek.object.v1.ExpertSlice target = 1;
  }
  repeated ExpertWithState states = 1;
}
message UpdateStateReq {
  ek.object.v1.ExpertSlice target = 1;
}
message UpdateStateResp {}

service StateService {
  rpc Retrieve(RetrieveStateReq) returns (stream RetrieveStateResp);
  rpc Update(UpdateStateReq) returns (UpdateStateResp);
}
