version: "3"
services:
  ek-postgres:
    container_name: ek-postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: dev
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5430:5432"
    volumes:
      - ../data/pg:/var/lib/postgresql/data
  ek-migrations:
    build:
      context: ../
      dockerfile: ../docker/Dockerfile.cpu
      target: controller
    depends_on:
      - ek-postgres
    environment:
      DATABASE_URL: postgres://dev:dev@postgres:5432/dev
    volumes:
      - ../ek-computation/migrations:/app/ek-migrations
    working_dir: /app/ek-migrations
    command: diesel migration run 
  ek-controller:
    build:
      context: ../
      dockerfile: ../docker/Dockerfile.cpu
      target: controller
    container_name: ek-controller
    restart: unless-stopped 
    depends_on:
      ek-postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ../data/:/app/data
      - ../config:/etc/expert-kit:ro
    environment:
      - RUST_LOG=info
    networks:
      - expert-kit-network
  worker:
    build:
      context: ../
      dockerfile: ../docker/Dockerfile.cpu
      target: worker
    container_name: ek-worker
    restart: unless-stopped
    depends_on:
      - ek-controller
    volumes:
      - model_data:/app/data
      - ./config:/etc/expert-kit:ro
    environment:
      - EK_HOSTNAME=ek-controller
      - RUST_LOG=info
      - LD_LIBRARY_PATH=/opt/torch/libtorch/lib:$LD_LIBRARY_PATH
    networks:
      - expert-kit-network

networks:
  expert-kit-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  model_data:
    driver: local
